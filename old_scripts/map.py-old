#! usr/bin/python3.6

# 2018-01-03, Carolina Monzo

# Modified for exomes-imprinting 2018-03-13

import os
import pandas as pd
import re
import argparse

def parseArguments():
    '''
    Function to parse arguments
    Input: path to project
    Output: parsed arguments from command line
    '''

    # Create argument parser class
    parser = argparse.ArgumentParser(description = "Map fastq files")

    # Define arguments to parse
    parser.add_argument("--project_path", "-p", required = False, type = str, help = "Argument to set the path to the project")

    # Call for arguments
    args = parser.parse_args()

    return(args)

def createMergedFastqFof(project_path):
    '''
    Function to create merged fastq files fof
    Input: path to the project of interest
    Output: fof file to do the mapping
    '''
    # Create fof file
    cmd_fof = 'find {0}/analysis/fastq/fastq_merged -name "*.fastq.gz" > {1}/analysis/fof_files/merged_fastq_files.fof'.format(project_path, project_path)

    # Write command on the command line
    print("[CMD]: " + cmd_fof)

    # Execute command and return fof file
    os.system(cmd_fof)
    return('{0}/analysis/fof_files/merged_fastq_files.fof'.format(project_path))



def merged_fastq_dataframe(fastq_files, project_path):
    '''
    Function to take lines from fof file to create a sorted pandas dataframe with info from merged fastqs
    Input: list of fastq files read from the fof file
    Ouptut: sorted dataframe with the fastq name metadata
    '''
    #<TODO> join this function with the fastq_dataframe function from merge_fastq.py
        #Ideally we would only create the rex variable outside and pass it as input to the function
        #Then we create an if statement and chose the corresponding columns for the dataframe
    


    # Regular expression to create an annonymous dictionary
    dict_list = []

    rex = re.compile(r"{}/analysis/fastq/fastq_merged/(?P<sample>\d+)_R(?P<read>\d+)_merged.fastq.gz".format(project_path))

    for fastq in fastq_files:
        m = rex.match(fastq)
        dicc = m.groupdict()
        dicc['fastq_file'] = fastq.split('/')[-1]
        dicc['fastq_path'] = str(fastq)
        dict_list.append(dicc)

    # Read fastq info array into a pandas dataframe
    
    df_fastq = pd.DataFrame(dict_list, columns = ['sample', 'read', 'fastq_file', 'fastq_path'])

    # Sort by sample and read

    df_fastq_sorted = df_fastq.sort_values(by=['fastq_path'], ascending=[True]).reset_index(drop=True)

    return(df_fastq_sorted)

def map_fastq(df_fastq_sorted, project_path):
    '''
    Function to create commands to map merged fastq files, we have
        a R1 and R2 fastq corresponding to each sample
    Input: dataframe with metadata from merged fastq files
    Output: files with commands for mapping with BWA
    '''
    # Create list by sample

    samples = list(df_fastq_sorted['sample'].unique())

    # Set templates

    for i in range(len(samples)):
        sample_fastqs = list(df_fastq_sorted[df_fastq_sorted['sample']==samples[i]]['fastq_path'])
        R1_list = sample_fastqs[0]
        R2_list = sample_fastqs[1]
        output_bam_name = df_fastq_sorted['sample'].unique()[i]

        # Create template for bwa
        
        cmd_bwa = "time bwa mem -M -L 5 -t 5 /nfs/qnapugdg8tb3a/nfs_references/human/1kg/hs37d5/hs37d5.fa.gz \
                {} {} 2> {}/analysis/mapping/{}_bwa_mem.err | samtools sort -O bam -o \
                {}/analysis/mapping/{}_sorted.bam; time samtools index {}/analysis/mapping/{}_sorted.bam".format(R1_list, R2_list, project_path, output_bam_name, project_path, output_bam_name, project_path, output_bam_name)

        # Write the cmd.sh file

        with open('{}/analysis/cmd_files/cmd_bwa_mem.sh'.format(project_path), 'a') as cmd_file:
            cmd_file.write(cmd_bwa + '\n')
    print("[INFO]: CMD_FILE - {}/analysis/cmd_files/cmd_bwa_mem.sh".format(project_path))

def main():
    '''
    Function to sort the order of functions to use
    '''

    args = parseArguments()

    fastq_fof = createMergedFastqFof(args.project_path)

    with open(fastq_fof) as fof:
        fastq_files = fof.read().splitlines()

    # Create fastq files dataframe

    df_fastq_sorted = merged_fastq_dataframe(fastq_files, args.project_path)

    # Create BWA MEM commands for mapping

    map_fastq(df_fastq_sorted, args.project_path)



if __name__ == '__main__':
    main()
